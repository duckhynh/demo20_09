import bcrypt from "bcrypt";
import express from "express";
import { User } from "../models/user.js";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import { sendMail } from "../config/mailer.js";

dotenv.config();
const router = express.Router();

/**
 * ================= REGISTER =================
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: ƒêƒÉng k√Ω user m·ªõi (g·ª≠i OTP email)
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - username
 *               - email
 *               - password
 *             properties:
 *               username:
 *                 type: string
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       201:
 *         description: T·∫°o user th√†nh c√¥ng, OTP ƒë√£ g·ª≠i email
 *       400:
 *         description: Username/Email ƒë√£ t·ªìn t·∫°i ho·∫∑c email kh√¥ng h·ª£p l·ªá
 */
router.post("/register", async (req, res) => {
  const { username, email, password } = req.body;
  try {
    const usernameExists = await User.findOne({ username });
    if (usernameExists) return res.status(400).json({ message: "Username ƒë√£ t·ªìn t·∫°i" });

    const emailExists = await User.findOne({ email });
    if (emailExists) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });

    const emailRegex = /^\S+@\S+\.\S+$/;
    if (!emailRegex.test(email)) return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá" });

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const otpExpire = new Date(Date.now() + 10 * 60 * 1000);

  // Use model pre-save hook to hash password (avoid double-hashing)
  const newUser = new User({ username, email, password, otp, otpExpire, isVerified: false });
  const user = await newUser.save();

    try {
      await sendMail(
        email,
        "M√£ OTP ƒëƒÉng k√Ω t√†i kho·∫£n",
        `Ch√†o ${username}, m√£ OTP c·ªßa b·∫°n l√†: ${otp}. C√≥ hi·ªáu l·ª±c 10 ph√∫t.`
      );
    } catch (mailErr) {
      await User.deleteOne({ _id: user._id });
      return res.status(400).json({ message: "Kh√¥ng g·ª≠i ƒë∆∞·ª£c email OTP" });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: process.env.JWT_EXPIRES_IN });

    res.status(201).json({
      user: { id: user._id, username: user.username, email: user.email },
      token,
      message: "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ l·∫•y OTP v√† x√°c th·ª±c t√†i kho·∫£n.",
    });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

/**
 * ================= VERIFY OTP =================
 * @swagger
 * /api/auth/verify-otp:
 *   post:
 *     summary: X√°c th·ª±c t√†i kho·∫£n b·∫±ng OTP
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - otp
 *             properties:
 *               email:
 *                 type: string
 *               otp:
 *                 type: string
 *     responses:
 *       200:
 *         description: OTP h·ª£p l·ªá, t√†i kho·∫£n k√≠ch ho·∫°t
 *       400:
 *         description: OTP kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
 *       404:
 *         description: User kh√¥ng t·ªìn t·∫°i
 */
router.post("/verify-otp", async (req, res) => {
  const { email, otp } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
    if (!user.otp || !user.otpExpire) return res.status(400).json({ message: "OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c h·∫øt h·∫°n" });
    if (user.otp !== otp) return res.status(400).json({ message: "OTP kh√¥ng ƒë√∫ng" });
    if (user.otpExpire < new Date()) return res.status(400).json({ message: "OTP ƒë√£ h·∫øt h·∫°n" });

    user.isVerified = true;
    user.otp = null;
    user.otpExpire = null;
    await user.save();

    res.json({ message: "X√°c th·ª±c OTP th√†nh c√¥ng. T√†i kho·∫£n ƒë√£ k√≠ch ho·∫°t." });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

/**
 * ================= LOGIN =================
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: ƒêƒÉng nh·∫≠p user (c·∫ßn OTP ƒë√£ x√°c th·ª±c)
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: ƒêƒÉng nh·∫≠p th√†nh c√¥ng, tr·∫£ v·ªÅ JWT token
 *       400:
 *         description: Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng
 *       403:
 *         description: T√†i kho·∫£n ch∆∞a x√°c th·ª±c OTP
 */
// ================= LOGIN =================
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    // T√¨m user theo email
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

    // Ki·ªÉm tra x√°c th·ª±c OTP tr∆∞·ªõc
    if (!user.isVerified) return res.status(403).json({ message: "T√†i kho·∫£n ch∆∞a x√°c th·ª±c OTP" });

    // So s√°nh m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

    // T·∫°o accessToken
    const accessToken = jwt.sign(
      { id: user._id, email: user.email, username: user.username },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    // Lo·∫°i b·ªè password tr∆∞·ªõc khi tr·∫£ v·ªÅ client
    const { password: _, ...userData } = user.toObject();

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      profile: userData,
      accessToken
    });
  } catch (err) {
    console.error("Login error:", err);
    res.status(500).json({ message: "Server l·ªói, th·ª≠ l·∫°i sau üòÖ", error: err });
  }
});

/**
 * ================= FORGOT PASSWORD =================
 * @swagger
 * /api/auth/forgot-password:
 *   post:
 *     summary: Y√™u c·∫ßu OTP ƒë·ªÉ reset m·∫≠t kh·∫©u
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *             properties:
 *               email:
 *                 type: string
 *     responses:
 *       200:
 *         description: OTP ƒë√£ g·ª≠i email
 *       404:
 *         description: User kh√¥ng t·ªìn t·∫°i
 */
router.post("/forgot-password", async (req, res) => {
  const { email } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const otpExpire = new Date(Date.now() + 10 * 60 * 1000);

    user.otp = otp;
    user.otpExpire = otpExpire;
    await user.save();

    await sendMail(email, "M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u", `M√£ OTP c·ªßa b·∫°n: ${otp}. Hi·ªáu l·ª±c 10 ph√∫t.`);

    res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

/**
 * ================= RESET PASSWORD =================
 * @swagger
 * /api/auth/reset-password:
 *   post:
 *     summary: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u b·∫±ng OTP
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - otp
 *               - newPassword
 *             properties:
 *               email:
 *                 type: string
 *               otp:
 *                 type: string
 *               newPassword:
 *                 type: string
 *     responses:
 *       200:
 *         description: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng
 *       400:
 *         description: OTP kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
 *       404:
 *         description: User kh√¥ng t·ªìn t·∫°i
 */
router.post("/reset-password", async (req, res) => {
  const { email, otp, newPassword } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
    if (!user.otp || !user.otpExpire) return res.status(400).json({ message: "OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c h·∫øt h·∫°n" });
    if (user.otp !== otp) return res.status(400).json({ message: "OTP kh√¥ng ƒë√∫ng" });
    if (user.otpExpire < new Date()) return res.status(400).json({ message: "OTP ƒë√£ h·∫øt h·∫°n" });

  // Let model pre-save hook hash the password
  user.password = newPassword;
    user.otp = null;
    user.otpExpire = null;
    await user.save();

    res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

export default router;
